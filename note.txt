x86 bootloader

Registers
	-registers ax through dx are 16bit general purpose registers and eax through edx are
	general purpose 32bit register. 
	-al through dl are the "low" bits which is the bottom half of registers ax-dx
	-ah through dh are the "high" bits which is the top half of registers ax-dx

Bios
    -BIOS is an x86 idiom for bootloader. First stage bootloader
    -BIOS selects boot device and copies first sector into physical memory at addr 0x7c00
    -boot sector(512mb) will conain bootloader code, partition table, disc signature
    as well as 'magic number'
        -'magic number is checked by bios to avoid loading something into boot sector
        that isnt suppose to be there
	-Boot Sector is sector of a persistant storage device like a floppy or hard disk
		-very first sector of hard disc is boot sector regardless of size(512 or 4096)
		-IBM compatiable machine selects boot device then copies first sector at memory address 0x7c00
    -bios tells CPU to jump to beginning of bootloader, passing control to bootloader
    -in order for kernel to start:
        -load kernel from disc to memory
        -set tup global descriptor table
        -swtiching fro 16bit to 32 and passing control to kernel
Processor Modes
    -processor modes refer to way a processor creates an operating system env for itself
    -three mode: real mode, protected mode, virtual real mode
    -Real Mode
        -only one program at a time
        -faster but with limited memory(1mb)
        -doesnt use 32bit
    -Protected mode
        -used for multitasking
        -full access to systems memory
        -supports virtual memory
        -faster access to memory and faster 32bit drivers to do i/o
        -each program runnign has its own memory address
Reading From Disk
	Cylinder-head-sector:
		-way of addressing each physical block on hardrive
		-sector is like a "slice" out of disk, where as cylinder would be ring around disk
	-easy in 16bit, utilize BIOS by sending interrupts
	-in order to read from disk, specify where to read, how much to read and where to store 
	the data in memory
	-send int 0x13, then set register system calls:
		-ah (MODE(0x02=read from disk))
		-al (Number of sectors to read)
		-ch (Cylinder)
		-cl (Sector)
		-dh (Head)
		-es:bx (Memory address to load into (Buffer address pointer))
	-push all general purpose register to stack with pusha
Global Descriptor Table:
	-memory segmenmtation works differently when leaving 16 bit mode
	-in protected mode, memory segments are defined by segment descriptors
	-flat memory model, or (linear memory model) refers to memory addressing paradigm in 
	which "memory appears to the program as a single contignous addess space" The CPU can
	directly address all of the available memory locations without having ot resort to any
	sort of memory segmentation or paging schemes
	-code and data will span 4gb
	-GDT structure contains
		-null segment descriptor. Catches errors where code forgets to select memory segment
		thus yielding an invalid segment
		-the 4gb code segment descriptor
		-the 4 gb data segment descriptor
	-a Segment Descriptor is a data structure containing the following:
		-base addr: 32bit starting memory address of the segment. this project, both data
		and code segement will be 0x00
		-segmenet limit: 20 bit length of the segments. 0xfffff for both segments
		-G(granularity): if set, the segmenet limit is counted as 4096-byte pages. this
		will be 1 for both segements, making the limit of 0xfffff pages into 0xfffff000
		bytes = 4gb
		-D(defualt operand size)/B(big): if set, 32 bit segement, otherwise 16bit. 1 for 
		both segment
		-L(long): if set, this is 64 bit segement(D must be 0)
		-AVL(available): Can be used for whatever (debugging), but set to 0 for now
		-DPL(descriptor priviledge level): priv level on protection ring required to access
		descriptor. will be 0 for both segements, kernel will access those
		-Type: if 1, this is code segmenet descriptor, 0 means data segement
			-code segement=D C R ; data segment=b, e, w
		-C(conforming): Code in this segment may be called for less-priviledged levels. 
		set to 0 to protect kernel
		-E(exand down): wether the data segment expands from the limit down base. Only 
		relevant for stack segmenets adn set to 0 in this case
		-W(writable): Set if data can be written to. Otherwise read only. 1 in this case
		-A(accessed): flag set by hardware when the segment is accessed. Debugging
Switching to Portected Mode
	-disable interrupts using cli intstruction (if not in protected mode, cli clears the IF
	flag in the EFLAGS registers
	-load the GDT desriptor into the GDT register using the lgdt instruction
		-lgdt loads the values in the source operand into the GDTR or the interrupt descipt
		table. The source operand specifies a 6-byte memory location that contains the base
		addr (linear address) and the limit(size of table in bytes) of Global Descriptor
		table or the IDT (interrupt dicriptor table). If 32 bits a 16-bit limit 
		(lower 2 bytes of the 6-byte data operand) and a 32-bit base address 
		(upper 4 bytes of the data operand) are loaded into the register. 
		If the operand-size attribute is 16 bits, a 16-bit limit (lower 2 bytes) 
		and a 24-bit base address (third, fourth, and fifth byte) are loaded.
		Here, the high-order byte of the operand is not used and the 
		high-order byte of the base address in the GDTR or IDTR is filled with zeros.
		-enable protected mode in the CONTROL register using cr0
		-Far jump into our code segment using jmp. needs to be a far jump so it flushed 
		the CPU pipeline, getting rid of any prefetched 16bit instructions
			-Far jump secifies both segmemt and offset
		-setup all segment register(ds, ss, es, fs, gs) to point single 4gb data segement
		-setup a new stack by setting the 32bit bottom pointer(ebp) and our esp
		-jump back to mbr.asm and give control to he kernel by calling 32bit kernel entry		
Writing Kernel
	-leaving 16bit real mode means you wont have BIOS at our disposal and have to write own
	i/o drivers, but can now write in C
	-output to screen will need to modify video memeory, VGA text mode eneabled memory begins
	at -xb8000
	-Writing to screen via video memory
		-in protected mode and not using bios, have direct access
		-color monitors 0xb8000 and monochrome 0xb0000
		-text mode two bytes for every character. One byte for ascii, the other for attribute
Kernel Entry
	-call main function in C
	-create function that calls main at KERNEL_OFFSET
	-kernel entry not included in mbr.asm, so place in front of kernel binary
VGA Driver
	-i/o driver for visual output
	-VGA 80x25
	-produce screen output by modifying dedicated memory region called video memory
	-specific port addressed interact with device ports usin I/O CPU instructions in and out
	-all i/o ports are memory mapped
	-access device "in and out" ports by using inline assebly
		-ex. __asm__("in %%al, %%dx" : "a=" (destination) : "d" (port));
		     __asm__("out %%dx, %%al" : : "a"(data), "d" (port));
